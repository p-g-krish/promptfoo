import React from 'react';
import { PLUGINS } from './data/plugins';
import styles from './VulnerabilityCategoriesTables.module.css';

// Define props interface with proper TypeScript types
interface VulnerabilityCategoriesTablesProps {
  label?: string;
  vulnerabilityType?: string;
  showSeverity?: boolean;
  showCategory?: boolean;
}

// Severity badge component with color coding
const SeverityBadge = ({ severity }: { severity: string }) => {
  const getSeverityColor = (severity: string) => {
    switch (severity.toLowerCase()) {
      case 'critical':
        return styles.critical;
      case 'high':
        return styles.high;
      case 'medium':
        return styles.medium;
      case 'low':
        return styles.low;
      default:
        return styles.info;
    }
  };

  return <span className={`${styles.badge} ${getSeverityColor(severity)}`}>{severity}</span>;
};

const VulnerabilityCategoriesTables = ({
  label,
  vulnerabilityType,
  showSeverity = true,
  showCategory = false,
}: VulnerabilityCategoriesTablesProps) => {
  // If vulnerabilityType is provided, only show plugins of that type
  const relevantPlugins = vulnerabilityType
    ? PLUGINS.filter((plugin) => plugin.vulnerabilityType === vulnerabilityType)
    : label
      ? PLUGINS.filter((plugin) => plugin.label === label)
      : PLUGINS;

  // Sort the plugins alphabetically by name
  const sortedPlugins = [...relevantPlugins].sort((a, b) => a.name.localeCompare(b.name));

  // If no plugins match, show a helpful message
  if (sortedPlugins.length === 0) {
    return <div className={styles.emptyState}>No plugins found for the selected criteria.</div>;
  }

  return (
    <div className={styles.tableContainer} role="region" aria-label="Vulnerability plugins">
      <table className={styles.vulnerabilityTable}>
        <thead>
          <tr>
            <th scope="col">Name</th>
            <th scope="col">Description</th>
            {showSeverity && <th scope="col">Severity</th>}
            {showCategory && <th scope="col">Category</th>}
            <th scope="col">Plugin ID</th>
          </tr>
        </thead>
        <tbody>
          {sortedPlugins.map((plugin) => (
            <tr key={plugin.pluginId}>
              <td>
                <a href={plugin.link} className={styles.pluginLink}>
                  {plugin.name}
                </a>
              </td>
              <td>{plugin.description}</td>
              {showSeverity && (
                <td>
                  {(plugin as any).severity ? (
                    <SeverityBadge severity={(plugin as any).severity} />
                  ) : (
                    <span className={styles.info}>-</span>
                  )}
                </td>
              )}
              {showCategory && (
                <td>
                  <span className={styles.category}>
                    {plugin.category || plugin.vulnerabilityType || '-'}
                  </span>
                </td>
              )}
              <td>
                <code className={styles.pluginId}>{plugin.pluginId}</code>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default VulnerabilityCategoriesTables;
