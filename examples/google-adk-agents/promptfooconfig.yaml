# yaml-language-server: $schema=https://promptfoo.dev/config-schema.json
description: Google ADK multi-agent travel planning system evaluation

prompts:
  - '{{query}}'

providers:
  - id: file://provider.py
    label: ADK Travel Coordinator
    config:
      apiKey: ${GOOGLE_API_KEY}

tests:
  # Basic trip planning
  - description: 'Complete trip planning request'
    vars:
      query: 'Plan a 3-day trip to Tokyo leaving December 15, 2024'
    assert:
      - type: javascript
        value: |
          const response = output.response || output;
          return typeof response === 'string' && 
                 response.toLowerCase().includes('tokyo') &&
                 response.toLowerCase().includes('december');
      - type: llm-rubric
        value: |
          The response should include:
          1. Flight recommendations
          2. Hotel suggestions  
          3. A daily itinerary
          4. Weather information
          Pass if at least 3 of these elements are present.

  # Weather-specific query
  - description: 'Weather information request'
    vars:
      query: 'What is the weather like in Paris in April?'
    assert:
      - type: javascript
        value: |
          const response = output.response || output;
          return typeof response === 'string' && 
                 response.toLowerCase().includes('paris') &&
                 response.toLowerCase().includes('april');

  # Flight search
  - description: 'Flight search request'
    vars:
      query: 'Find flights from New York to London for Christmas week'
    assert:
      - type: javascript
        value: |
          const response = output.response || output;
          return typeof response === 'string' &&
                 response.toLowerCase().includes('flight') &&
                 response.toLowerCase().includes('new york') &&
                 response.toLowerCase().includes('london');

  # Hotel search
  - description: 'Hotel search with budget'
    vars:
      query: 'Find budget hotels in Barcelona under $100 per night'
    assert:
      - type: javascript
        value: |
          const response = output.response || output;
          return typeof response === 'string' &&
                 (response.toLowerCase().includes('budget') || response.toLowerCase().includes('affordable')) &&
                 response.toLowerCase().includes('barcelona') &&
                 response.toLowerCase().includes('hotel');

  # Activity planning
  - description: 'Activity planning request'
    vars:
      query: 'What are the top things to do in Rome for art lovers?'
    assert:
      - type: javascript
        value: |
          const response = output.response || output;
          return typeof response === 'string' &&
                 response.toLowerCase().includes('rome') &&
                 response.toLowerCase().includes('art');

  # Complex multi-city trip
  - description: 'Multi-city trip planning'
    vars:
      query: 'Plan a 10-day trip visiting Paris, Rome, and Barcelona with a $3000 budget'
    assert:
      - type: javascript
        value: |
          const response = output.response || output;
          const text = typeof response === 'string' ? response : '';
          return text.toLowerCase().includes('paris') &&
                 text.toLowerCase().includes('rome') &&
                 text.toLowerCase().includes('barcelona');
      - type: llm-rubric
        value: |
          The response should address the multi-city nature of the trip and mention all three cities.

  # Date-specific request
  - description: 'Specific date availability'
    vars:
      query: 'Are there any flights from San Francisco to Tokyo on March 15, 2024?'
    assert:
      - type: javascript
        value: |
          const response = output.response || output;
          return typeof response === 'string' &&
                 response.toLowerCase().includes('march') &&
                 response.toLowerCase().includes('tokyo');

  # Family travel
  - description: 'Family travel planning'
    vars:
      query: 'Plan a family-friendly weekend in Orlando with 2 kids ages 8 and 10'
    assert:
      - type: javascript
        value: |
          const response = output.response || output;
          return typeof response === 'string' &&
                 response.toLowerCase().includes('orlando') &&
                 (response.toLowerCase().includes('family') || response.toLowerCase().includes('kids'));

  # Business travel
  - description: 'Business travel request'
    vars:
      query: 'I need a hotel near Times Square for a business trip next Tuesday'
    assert:
      - type: javascript
        value: |
          const response = output.response || output;
          return typeof response === 'string' &&
                 response.toLowerCase().includes('times square') &&
                 response.toLowerCase().includes('hotel');

  # Last-minute travel
  - description: 'Last-minute travel planning'
    vars:
      query: 'I need to fly to Chicago tomorrow for an emergency. What are my options?'
    assert:
      - type: javascript
        value: |
          const response = output.response || output;
          return typeof response === 'string' &&
                 response.toLowerCase().includes('chicago') &&
                 (response.toLowerCase().includes('tomorrow') || response.toLowerCase().includes('flight'));

  # Weekend getaway
  - description: 'Weekend getaway suggestions'
    vars:
      query: 'Suggest a romantic weekend getaway near San Francisco'
    assert:
      - type: javascript
        value: |
          const response = output.response || output;
          return typeof response === 'string' &&
                 response.toLowerCase().includes('san francisco') &&
                 (response.toLowerCase().includes('romantic') || response.toLowerCase().includes('weekend'));

  # Error handling
  - description: 'Handling unavailable destination'
    vars:
      query: 'Plan a trip to Atlantis next week'
    assert:
      - type: javascript
        value: |
          // Should handle gracefully without errors
          return output !== null && output !== undefined;
