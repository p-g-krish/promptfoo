# yaml-language-server: $schema=https://promptfoo.dev/config-schema.json
description: Google ADK Travel Planning System with Gemini 2.5 Flash

# Enable comprehensive tracing for debugging
tracing:
  enabled: true
  otlp:
    http:
      enabled: true
      port: 4318
      acceptFormats:
        - json
      metadata:
        service.name: adk-travel-assistant
        service.version: '2.0'

prompts:
  - '{{query}}'

providers:
  - id: file://provider.py
    label: ADK Travel System (Gemini 2.5 Flash)
    config:
      # Model configuration
      apiKey: ${GOOGLE_API_KEY}
      model: gemini-2.5-flash-preview-05-20
      temperature: 0.7
      maxOutputTokens: 65000  # Leverage Gemini 2.5's massive output capacity
      
      # Enable thinking mode for complex queries
      thinking:
        enabled: true
        mode: auto  # Let model decide when to think
        maxBudget: 8192  # High budget for complex planning
      
      # Travel agent specific settings
      defaults:
        budget_level: mid-range
        trip_style: balanced
        include_tips: true
        enable_search: true  # Use Google Search tool
        enable_calculations: true  # Use code execution
      
      # Response formatting
      response_format:
        include_budget_breakdown: true
        include_weather: true
        max_itinerary_days: 14
        format: structured  # Request structured output

tests:
  # Test 1: Simple query (low thinking)
  - description: 'Simple weather query'
    vars:
      query: 'What is the weather like in Hawaii?'
    assert:
      - type: contains
        value: 'Hawaii'
      - type: javascript
        value: |
          // Should be a quick response without extensive thinking
          const response = output.response || output;
          return response.length < 2000;  // Simple queries should be concise

  # Test 2: Complex multi-city optimization (high thinking)
  - description: 'Complex multi-city budget optimization'
    vars:
      query: 'Plan a 14-day trip through Europe visiting Paris, Rome, Barcelona, and Amsterdam with a $3000 budget. Optimize the route to minimize travel costs and maximize time in each city. Include specific flight options and calculate total costs.'
    assert:
      - type: contains-all
        value: ['Paris', 'Rome', 'Barcelona', 'Amsterdam', 'budget', '$3000']
      - type: javascript
        value: |
          const response = output.response || output;
          // Check for route optimization
          return response.includes('route') || response.includes('optimal') || response.includes('optimize');
      - type: llm-rubric
        value: |
          The response should demonstrate deep thinking by:
          1. Analyzing different route permutations
          2. Calculating specific costs for each option
          3. Providing a clear recommendation with reasoning
          4. Including a detailed day-by-day itinerary
          Pass if at least 3 of these elements show thoughtful analysis.

  # Test 3: Real-time search integration
  - description: 'Current flight prices with search tool'
    vars:
      query: 'Find the cheapest flights from San Francisco to Tokyo next month. Search for current prices and show me the best options.'
    assert:
      - type: javascript
        value: |
          const response = output.response || output;
          // Should mention searching or current prices
          return response.includes('search') || response.includes('current') || response.includes('found');
      - type: contains-any
        value: ['price', 'cost', '$', 'USD']

  # Test 4: Budget calculation with code execution
  - description: 'Detailed budget breakdown with calculations'
    vars:
      query: 'Calculate a detailed budget for a 7-day trip to Japan for 2 people. Include flights ($800/person), hotels, meals, transportation, and activities. Show the math and give me totals in USD and JPY.'
    assert:
      - type: javascript
        value: |
          const response = output.response || output;
          // Check for calculations
          return response.includes('$800') && 
                 (response.includes('total') || response.includes('Total')) &&
                 response.includes('JPY');
      - type: llm-rubric
        value: 'Response should show actual calculations and conversions between USD and JPY'

  # Test 5: Comparative analysis (medium thinking)
  - description: 'Destination comparison with pros/cons'
    vars:
      query: 'Compare Thailand vs Vietnam for a 2-week backpacking trip in terms of cost, safety, food, and experiences. Which would you recommend for a first-time solo traveler?'
    assert:
      - type: contains-all
        value: ['Thailand', 'Vietnam', 'cost', 'safety', 'food']
      - type: javascript
        value: |
          const response = output.response || output;
          // Should have comparison structure
          return (response.includes('pros') || response.includes('Pros')) &&
                 (response.includes('cons') || response.includes('Cons'));
      - type: llm-rubric
        value: 'Should provide a structured comparison with clear recommendation and reasoning'

  # Test 6: Context retention (session management)
  - description: 'Follow-up question using context'
    vars:
      query: 'What about vegetarian food options there?'
      # This assumes previous context about a destination
    assert:
      - type: javascript
        value: |
          const response = output.response || output;
          return response.includes('vegetarian') || response.includes('veg');
      - type: not-contains
        value: "I don't have enough context"

  # Test 7: Error handling for impossible requests
  - description: 'Graceful handling of impossible request'
    vars:
      query: 'Book me a flight to Mars leaving tomorrow'
    assert:
      - type: javascript
        value: |
          // Should handle gracefully without errors
          return output !== null && output !== undefined && !output.error;
      - type: llm-rubric
        value: 'Should politely explain why the request cannot be fulfilled'

  # Test 8: Structured output test
  - description: 'Request for structured JSON output'
    vars:
      query: 'Give me a structured JSON response with flight options from NYC to London next week. Include airline, price, duration, and departure times.'
    assert:
      - type: javascript
        value: |
          const response = output.response || output;
          try {
            // Check if response contains valid JSON
            const jsonMatch = response.match(/\{[\s\S]*\}/);
            if (jsonMatch) {
              JSON.parse(jsonMatch[0]);
              return true;
            }
            return false;
          } catch {
            return false;
          }

  # Test 9: Tool authentication scenario
  - description: 'Booking request requiring authentication'
    vars:
      query: 'Book the Hilton hotel in Tokyo for December 20-25'
    assert:
      - type: javascript
        value: |
          const response = output.response || output;
          // Should mention booking process or authentication
          return response.includes('book') || response.includes('Book') || 
                 response.includes('reservation') || response.includes('authentication');

  # Test 10: Performance test - large output
  - description: 'Comprehensive 30-day world tour plan'
    vars:
      query: 'Plan a detailed 30-day around-the-world trip visiting 10 countries across 5 continents. Include daily activities, all transportation, accommodations, and a complete budget breakdown.'
    assert:
      - type: javascript
        value: |
          const response = output.response || output;
          // Should produce a long, detailed response
          return response.length > 5000;
      - type: contains-any
        value: ['Day 1', 'Day 2', 'Day 3', 'itinerary', 'Itinerary']
      - type: javascript
        value: |
          // Check performance metrics if available
          if (output.performance) {
            // Response should complete within reasonable time (30s)
            return output.performance.total_duration < 30;
          }
          return true;

  # Test 11: Caching behavior
  - description: 'Repeated query to test caching'
    vars:
      query: 'What are the top attractions in Paris?'
    assert:
      - type: contains
        value: 'Paris'
      - type: javascript
        value: |
          // On second run, this might be cached
          // Just ensure response is valid
          return output.response && output.response.length > 100;

  # Test 12: Advanced tool integration
  - description: 'Query requiring multiple tools'
    vars:
      query: 'Search for the best-rated restaurants in Kyoto, calculate the average meal cost in USD, and recommend a food tour itinerary for 3 days.'
    assert:
      - type: contains-all
        value: ['Kyoto', 'restaurant', 'USD']
      - type: javascript
        value: |
          const response = output.response || output;
          // Should show evidence of search and calculation
          return (response.includes('search') || response.includes('found')) &&
                 (response.includes('average') || response.includes('cost'));

# Output configuration for better reporting
outputs:
  - file://output/results.json
  - file://output/results.html

# Scoring configuration
scoring:
  # Weigh complex queries more heavily
  weights:
    'Complex multi-city budget optimization': 2.0
    'Detailed budget breakdown with calculations': 1.5
    'Comprehensive 30-day world tour plan': 2.0
    'Query requiring multiple tools': 1.5
