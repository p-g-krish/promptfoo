# yaml-language-server: $schema=https://promptfoo.dev/config-schema.json
description: Variable Optimizer - Code Generation Testing

prompts:
  - |
    {{instruction}}
    
    Requirements: {{requirements}}
    
    Generate {{language}} code:

providers:
  - openai:gpt-4.1

defaultTest:
  provider:
    id: promptfoo:variable-optimizer
    config:
      maxTurns: 8
      targetVariable: instruction
      numCandidates: 3
      stallIterations: 5

tests:
  # Test 1: Python function with specific signature
  - vars:
      instruction: "Create a utility function"
      requirements: "Must handle edge cases and include error handling"
      language: "Python"
    assert:
      - type: icontains
        value: "def "
      - type: icontains
        value: "try:"
      - type: icontains
        value: "except"
      - type: javascript
        value: |
          // Check for function definition and error handling
          return output.includes('def ') && 
                 (output.includes('try:') || output.includes('except')) &&
                 output.includes('return');

  # Test 2: JavaScript class with specific methods
  - vars:
      instruction: "Build a data structure"
      requirements: "Must have constructor, getter, setter, and validation"
      language: "JavaScript"
    assert:
      - type: icontains
        value: "class "
      - type: icontains
        value: "constructor"
      - type: javascript
        value: |
          // Check for class structure with required methods
          const hasClass = output.includes('class ');
          const hasConstructor = output.includes('constructor');
          const hasGetSet = output.includes('get ') || output.includes('set ') || 
                           output.includes('getter') || output.includes('setter');
          return hasClass && hasConstructor && hasGetSet;

  # Test 3: SQL query with specific constraints
  - vars:
      instruction: "Write a database query"
      requirements: "Must join multiple tables and include aggregation"
      language: "SQL"
    assert:
      - type: icontains
        value: "SELECT"
      - type: icontains
        value: "JOIN"
      - type: javascript
        value: |
          // Check for SQL aggregation functions
          const aggregations = ['COUNT', 'SUM', 'AVG', 'MAX', 'MIN', 'GROUP BY'];
          const upperOutput = output.toUpperCase();
          return aggregations.some(agg => upperOutput.includes(agg));

  # Test 4: API endpoint with error handling
  - vars:
      instruction: "Create a REST API endpoint"
      requirements: "Must include input validation and proper HTTP status codes"
      language: "Node.js"
    assert:
      - type: javascript
        value: |
          // Check for API-related patterns
          const apiPatterns = ['app.', 'router.', 'express', 'req.', 'res.'];
          const statusPatterns = ['status(', '.json(', '200', '400', '404', '500'];
          const validationPatterns = ['validation', 'validate', 'check', 'required'];
          
          const hasApi = apiPatterns.some(pattern => output.includes(pattern));
          const hasStatus = statusPatterns.some(pattern => output.includes(pattern));
          const hasValidation = validationPatterns.some(pattern => 
            output.toLowerCase().includes(pattern.toLowerCase()));
          
          return hasApi && hasStatus && hasValidation;

  # Test 5: React component with hooks
  - vars:
      instruction: "Build a user interface component"
      requirements: "Must use modern React hooks and handle user interactions"
      language: "React/TypeScript"
    assert:
      - type: icontains
        value: "useState"
      - type: icontains
        value: "useEffect"
      - type: javascript
        value: |
          // Check for React component patterns
          const reactPatterns = ['useState', 'useEffect', 'onClick', 'onChange', 'return'];
          return reactPatterns.every(pattern => output.includes(pattern));
      - type: icontains
        value: "interface"

  # Test 6: Algorithm with specific complexity
  - vars:
      instruction: "Implement a search algorithm"
      requirements: "Must be efficient with O(log n) time complexity and include comments"
      language: "Python"
    assert:
      - type: icontains
        value: "def "
      - type: javascript
        value: |
          // Check for algorithm characteristics
          const hasComments = output.includes('#') || output.includes('"""') || output.includes("'''");
          const hasBinarySearch = output.toLowerCase().includes('binary') || 
                                 output.includes('mid') || 
                                 output.includes('left') && output.includes('right');
          const hasComplexity = output.toLowerCase().includes('o(log') || 
                               output.toLowerCase().includes('logarithmic');
          
          return hasComments && (hasBinarySearch || hasComplexity);
      - type: icontains
        value: "return"

  # Test 7: Database schema with relationships
  - vars:
      instruction: "Design database tables"
      requirements: "Must include foreign keys and proper indexing"
      language: "SQL"
    assert:
      - type: icontains
        value: "CREATE TABLE"
      - type: javascript
        value: |
          // Check for database design elements
          const upperOutput = output.toUpperCase();
          const hasForeignKey = upperOutput.includes('FOREIGN KEY') || 
                               upperOutput.includes('REFERENCES');
          const hasIndex = upperOutput.includes('INDEX') || 
                          upperOutput.includes('PRIMARY KEY');
          const hasConstraint = upperOutput.includes('CONSTRAINT') || 
                               upperOutput.includes('NOT NULL');
          
          return hasForeignKey && hasIndex && hasConstraint; 