# generated by datamodel-codegen:
#   filename:  config-schema.json
#   timestamp: 2025-03-25T20:02:59+00:00
#   name-cleanup: Applied class name improvements
#
# NOTE FOR MAINTAINERS:
# This file is auto-generated and should not be manually edited.
# Consider adding this file to .gitignore and generating it during the build process
# instead of storing it in the repository.
# See src/python/README.md for regeneration instructions.
#
# NOTE ON CLASS NAMES:
# The original auto-generated class names (like Type1, Type2, Providers1) have been 
# replaced with more descriptive names (like AssertionMethodEnum, ProviderConfig) for
# improved readability and developer experience. This replacement is done automatically
# during the build process using scripts/cleanupPythonSchema.py.

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, Extra, Field, PositiveInt, conint, constr


class Providers(BaseModel):
    label: Optional[str] = None


class Env(BaseModel):
    class Config:
        extra = Extra.forbid

    AI21_API_BASE_URL: Optional[str] = None
    AI21_API_KEY: Optional[str] = None
    ANTHROPIC_API_KEY: Optional[str] = None
    ANTHROPIC_BASE_URL: Optional[str] = None
    AWS_BEDROCK_REGION: Optional[str] = None
    AZURE_API_BASE_URL: Optional[str] = None
    AZURE_API_HOST: Optional[str] = None
    AZURE_API_KEY: Optional[str] = None
    AZURE_AUTHORITY_HOST: Optional[str] = None
    AZURE_CLIENT_ID: Optional[str] = None
    AZURE_CLIENT_SECRET: Optional[str] = None
    AZURE_DEPLOYMENT_NAME: Optional[str] = None
    AZURE_EMBEDDING_DEPLOYMENT_NAME: Optional[str] = None
    AZURE_OPENAI_API_BASE_URL: Optional[str] = None
    AZURE_OPENAI_API_HOST: Optional[str] = None
    AZURE_OPENAI_API_KEY: Optional[str] = None
    AZURE_OPENAI_BASE_URL: Optional[str] = None
    AZURE_OPENAI_DEPLOYMENT_NAME: Optional[str] = None
    AZURE_OPENAI_EMBEDDING_DEPLOYMENT_NAME: Optional[str] = None
    AZURE_TENANT_ID: Optional[str] = None
    AZURE_TOKEN_SCOPE: Optional[str] = None
    BAM_API_HOST: Optional[str] = None
    BAM_API_KEY: Optional[str] = None
    CLOUDFLARE_ACCOUNT_ID: Optional[str] = None
    CLOUDFLARE_API_KEY: Optional[str] = None
    COHERE_API_KEY: Optional[str] = None
    COHERE_CLIENT_NAME: Optional[str] = None
    DATABRICKS_TOKEN: Optional[str] = None
    DATABRICKS_WORKSPACE_URL: Optional[str] = None
    FAL_KEY: Optional[str] = None
    GOOGLE_API_HOST: Optional[str] = None
    GOOGLE_API_KEY: Optional[str] = None
    GROQ_API_KEY: Optional[str] = None
    HELICONE_API_KEY: Optional[str] = None
    HF_API_TOKEN: Optional[str] = None
    HF_TOKEN: Optional[str] = None
    LANGFUSE_HOST: Optional[str] = None
    LANGFUSE_PUBLIC_KEY: Optional[str] = None
    LANGFUSE_SECRET_KEY: Optional[str] = None
    LLAMA_BASE_URL: Optional[str] = None
    LOCALAI_BASE_URL: Optional[str] = None
    MISTRAL_API_BASE_URL: Optional[str] = None
    MISTRAL_API_HOST: Optional[str] = None
    MISTRAL_API_KEY: Optional[str] = None
    OLLAMA_API_KEY: Optional[str] = None
    OLLAMA_BASE_URL: Optional[str] = None
    OPENAI_API_BASE_URL: Optional[str] = None
    OPENAI_API_HOST: Optional[str] = None
    OPENAI_API_KEY: Optional[str] = None
    OPENAI_BASE_URL: Optional[str] = None
    OPENAI_ORGANIZATION: Optional[str] = None
    PALM_API_HOST: Optional[str] = None
    PALM_API_KEY: Optional[str] = None
    PORTKEY_API_KEY: Optional[str] = None
    PROMPTFOO_CA_CERT_PATH: Optional[str] = None
    PROMPTFOO_INSECURE_SSL: Optional[str] = None
    REPLICATE_API_KEY: Optional[str] = None
    REPLICATE_API_TOKEN: Optional[str] = None
    VERTEX_API_HOST: Optional[str] = None
    VERTEX_API_KEY: Optional[str] = None
    VERTEX_API_VERSION: Optional[str] = None
    VERTEX_PROJECT_ID: Optional[str] = None
    VERTEX_PUBLISHER: Optional[str] = None
    VERTEX_REGION: Optional[str] = None
    VOYAGE_API_BASE_URL: Optional[str] = None
    VOYAGE_API_KEY: Optional[str] = None
    WATSONX_AI_APIKEY: Optional[str] = None
    WATSONX_AI_AUTH_TYPE: Optional[str] = None
    WATSONX_AI_BEARER_TOKEN: Optional[str] = None
    WATSONX_AI_PROJECT_ID: Optional[str] = None
    AZURE_CONTENT_SAFETY_ENDPOINT: Optional[str] = None
    AZURE_CONTENT_SAFETY_API_KEY: Optional[str] = None
    AZURE_CONTENT_SAFETY_API_VERSION: Optional[str] = None


class ProviderConfig(BaseModel):
    class Config:
        extra = Extra.forbid

    id: Optional[Any] = None
    label: Optional[Any] = None
    config: Optional[Any] = None
    prompts: Optional[List[str]] = None
    transform: Optional[str] = None
    delay: Optional[float] = None
    env: Optional[Env] = None


class Prompts(BaseModel):
    class Config:
        extra = Extra.forbid

    id: str
    label: Optional[str] = None
    raw: Optional[str] = None


class PromptConfig(BaseModel):
    class Config:
        extra = Extra.forbid

    id: Optional[str] = None
    raw: str
    display: Optional[str] = None
    label: str
    config: Optional[Any] = None


class Provider(BaseModel):
    class Config:
        extra = Extra.forbid

    callApi: Optional[Any] = None
    label: Optional[Any] = None
    transform: Optional[str] = None
    delay: Optional[float] = None
    config: Optional[Any] = None


class Type(Enum):
    answer_relevance = "answer-relevance"
    bleu = "bleu"
    classifier = "classifier"
    contains_all = "contains-all"
    contains_any = "contains-any"
    contains_json = "contains-json"
    contains_sql = "contains-sql"
    contains_xml = "contains-xml"
    contains = "contains"
    context_faithfulness = "context-faithfulness"
    context_recall = "context-recall"
    context_relevance = "context-relevance"
    cost = "cost"
    equals = "equals"
    factuality = "factuality"
    g_eval = "g-eval"
    guardrails = "guardrails"
    icontains_all = "icontains-all"
    icontains_any = "icontains-any"
    icontains = "icontains"
    is_json = "is-json"
    is_refusal = "is-refusal"
    is_sql = "is-sql"
    is_valid_openai_function_call = "is-valid-openai-function-call"
    is_valid_openai_tools_call = "is-valid-openai-tools-call"
    is_xml = "is-xml"
    javascript = "javascript"
    latency = "latency"
    levenshtein = "levenshtein"
    llm_rubric = "llm-rubric"
    model_graded_closedqa = "model-graded-closedqa"
    model_graded_factuality = "model-graded-factuality"
    moderation = "moderation"
    perplexity_score = "perplexity-score"
    perplexity = "perplexity"
    python = "python"
    regex = "regex"
    rouge_n = "rouge-n"
    similar = "similar"
    starts_with = "starts-with"
    webhook = "webhook"


class GraderType(Enum):
    select_best = "select-best"
    human = "human"


class RubricPromptItem(BaseModel):
    class Config:
        extra = Extra.forbid

    role: str
    content: str


class Factuality(BaseModel):
    class Config:
        extra = Extra.forbid

    subset: Optional[float] = None
    superset: Optional[float] = None
    agree: Optional[float] = None
    disagree: Optional[float] = None
    differButFactual: Optional[float] = None


class Options(BaseModel):
    prefix: Optional[str] = None
    suffix: Optional[str] = None
    postprocess: Optional[str] = None
    transform: Optional[str] = None
    transformVars: Optional[str] = None
    storeOutputAs: Optional[str] = None
    rubricPrompt: Optional[Union[str, List[str], List[RubricPromptItem]]] = None
    provider: Optional[Union[str, Any, Union[Any, Dict[str, Union[str, Any]]]]] = None
    factuality: Optional[Factuality] = None
    disableVarExpansion: Optional[bool] = None
    disableConversationVar: Optional[bool] = None
    runSerially: Optional[bool] = None


class Metadata(BaseModel):
    pluginConfig: Optional[Any] = None
    strategyConfig: Optional[Any] = None


class Sharing(BaseModel):
    class Config:
        extra = Extra.forbid

    apiBaseUrl: Optional[str] = None
    appBaseUrl: Optional[str] = None


class DerivedMetric(BaseModel):
    class Config:
        extra = Extra.forbid

    name: str
    value: str


class Plugins(Enum):
    ascii_smuggling = "ascii-smuggling"
    beavertails = "beavertails"
    bfla = "bfla"
    bias = "bias"
    bola = "bola"
    competitors = "competitors"
    contracts = "contracts"
    cross_session_leak = "cross-session-leak"
    cyberseceval = "cyberseceval"
    debug_access = "debug-access"
    default = "default"
    divergent_repetition = "divergent-repetition"
    excessive_agency = "excessive-agency"
    foundation = "foundation"
    hallucination = "hallucination"
    harmbench = "harmbench"
    harmful = "harmful"
    harmful_chemical_biological_weapons = "harmful:chemical-biological-weapons"
    harmful_child_exploitation = "harmful:child-exploitation"
    harmful_copyright_violations = "harmful:copyright-violations"
    harmful_cybercrime = "harmful:cybercrime"
    harmful_cybercrime_malicious_code = "harmful:cybercrime:malicious-code"
    harmful_graphic_content = "harmful:graphic-content"
    harmful_harassment_bullying = "harmful:harassment-bullying"
    harmful_hate = "harmful:hate"
    harmful_illegal_activities = "harmful:illegal-activities"
    harmful_illegal_drugs = "harmful:illegal-drugs"
    harmful_illegal_drugs_meth = "harmful:illegal-drugs:meth"
    harmful_indiscriminate_weapons = "harmful:indiscriminate-weapons"
    harmful_insults = "harmful:insults"
    harmful_intellectual_property = "harmful:intellectual-property"
    harmful_misinformation_disinformation = "harmful:misinformation-disinformation"
    harmful_non_violent_crime = "harmful:non-violent-crime"
    harmful_privacy = "harmful:privacy"
    harmful_profanity = "harmful:profanity"
    harmful_radicalization = "harmful:radicalization"
    harmful_self_harm = "harmful:self-harm"
    harmful_sex_crime = "harmful:sex-crime"
    harmful_sexual_content = "harmful:sexual-content"
    harmful_specialized_advice = "harmful:specialized-advice"
    harmful_unsafe_practices = "harmful:unsafe-practices"
    harmful_violent_crime = "harmful:violent-crime"
    harmful_weapons_ied = "harmful:weapons:ied"
    hijacking = "hijacking"
    illegal_activity = "illegal-activity"
    imitation = "imitation"
    indirect_prompt_injection = "indirect-prompt-injection"
    intent = "intent"
    misinformation = "misinformation"
    mitre_atlas = "mitre:atlas"
    mitre_atlas_exfiltration = "mitre:atlas:exfiltration"
    mitre_atlas_impact = "mitre:atlas:impact"
    mitre_atlas_initial_access = "mitre:atlas:initial-access"
    mitre_atlas_ml_attack_staging = "mitre:atlas:ml-attack-staging"
    mitre_atlas_reconnaissance = "mitre:atlas:reconnaissance"
    mitre_atlas_resource_development = "mitre:atlas:resource-development"
    nist_ai = "nist:ai"
    nist_ai_measure = "nist:ai:measure"
    nist_ai_measure_1_1 = "nist:ai:measure:1.1"
    nist_ai_measure_1_2 = "nist:ai:measure:1.2"
    nist_ai_measure_2_1 = "nist:ai:measure:2.1"
    nist_ai_measure_2_10 = "nist:ai:measure:2.10"
    nist_ai_measure_2_11 = "nist:ai:measure:2.11"
    nist_ai_measure_2_12 = "nist:ai:measure:2.12"
    nist_ai_measure_2_13 = "nist:ai:measure:2.13"
    nist_ai_measure_2_2 = "nist:ai:measure:2.2"
    nist_ai_measure_2_3 = "nist:ai:measure:2.3"
    nist_ai_measure_2_4 = "nist:ai:measure:2.4"
    nist_ai_measure_2_5 = "nist:ai:measure:2.5"
    nist_ai_measure_2_6 = "nist:ai:measure:2.6"
    nist_ai_measure_2_7 = "nist:ai:measure:2.7"
    nist_ai_measure_2_8 = "nist:ai:measure:2.8"
    nist_ai_measure_2_9 = "nist:ai:measure:2.9"
    nist_ai_measure_3_1 = "nist:ai:measure:3.1"
    nist_ai_measure_3_2 = "nist:ai:measure:3.2"
    nist_ai_measure_3_3 = "nist:ai:measure:3.3"
    nist_ai_measure_4_1 = "nist:ai:measure:4.1"
    nist_ai_measure_4_2 = "nist:ai:measure:4.2"
    nist_ai_measure_4_3 = "nist:ai:measure:4.3"
    overreliance = "overreliance"
    owasp_api = "owasp:api"
    owasp_api_01 = "owasp:api:01"
    owasp_api_02 = "owasp:api:02"
    owasp_api_03 = "owasp:api:03"
    owasp_api_04 = "owasp:api:04"
    owasp_api_05 = "owasp:api:05"
    owasp_api_06 = "owasp:api:06"
    owasp_api_07 = "owasp:api:07"
    owasp_api_08 = "owasp:api:08"
    owasp_api_09 = "owasp:api:09"
    owasp_api_10 = "owasp:api:10"
    owasp_llm = "owasp:llm"
    owasp_llm_01 = "owasp:llm:01"
    owasp_llm_02 = "owasp:llm:02"
    owasp_llm_03 = "owasp:llm:03"
    owasp_llm_04 = "owasp:llm:04"
    owasp_llm_05 = "owasp:llm:05"
    owasp_llm_06 = "owasp:llm:06"
    owasp_llm_07 = "owasp:llm:07"
    owasp_llm_08 = "owasp:llm:08"
    owasp_llm_09 = "owasp:llm:09"
    owasp_llm_10 = "owasp:llm:10"
    personal_safety = "personal-safety"
    pii = "pii"
    pii_api_db = "pii:api-db"
    pii_direct = "pii:direct"
    pii_session = "pii:session"
    pii_social = "pii:social"
    pliny = "pliny"
    policy = "policy"
    politics = "politics"
    prompt_extraction = "prompt-extraction"
    rag_document_exfiltration = "rag-document-exfiltration"
    rag_poisoning = "rag-poisoning"
    rbac = "rbac"
    reasoning_dos = "reasoning-dos"
    religion = "religion"
    shell_injection = "shell-injection"
    sql_injection = "sql-injection"
    ssrf = "ssrf"
    system_prompt_override = "system-prompt-override"
    tool_discovery = "tool-discovery"
    toxicity = "toxicity"


class Id(Enum):
    ascii_smuggling = "ascii-smuggling"
    beavertails = "beavertails"
    bfla = "bfla"
    bias = "bias"
    bola = "bola"
    competitors = "competitors"
    contracts = "contracts"
    cross_session_leak = "cross-session-leak"
    cyberseceval = "cyberseceval"
    debug_access = "debug-access"
    default = "default"
    divergent_repetition = "divergent-repetition"
    excessive_agency = "excessive-agency"
    foundation = "foundation"
    hallucination = "hallucination"
    harmbench = "harmbench"
    harmful = "harmful"
    harmful_chemical_biological_weapons = "harmful:chemical-biological-weapons"
    harmful_child_exploitation = "harmful:child-exploitation"
    harmful_copyright_violations = "harmful:copyright-violations"
    harmful_cybercrime = "harmful:cybercrime"
    harmful_cybercrime_malicious_code = "harmful:cybercrime:malicious-code"
    harmful_graphic_content = "harmful:graphic-content"
    harmful_harassment_bullying = "harmful:harassment-bullying"
    harmful_hate = "harmful:hate"
    harmful_illegal_activities = "harmful:illegal-activities"
    harmful_illegal_drugs = "harmful:illegal-drugs"
    harmful_illegal_drugs_meth = "harmful:illegal-drugs:meth"
    harmful_indiscriminate_weapons = "harmful:indiscriminate-weapons"
    harmful_insults = "harmful:insults"
    harmful_intellectual_property = "harmful:intellectual-property"
    harmful_misinformation_disinformation = "harmful:misinformation-disinformation"
    harmful_non_violent_crime = "harmful:non-violent-crime"
    harmful_privacy = "harmful:privacy"
    harmful_profanity = "harmful:profanity"
    harmful_radicalization = "harmful:radicalization"
    harmful_self_harm = "harmful:self-harm"
    harmful_sex_crime = "harmful:sex-crime"
    harmful_sexual_content = "harmful:sexual-content"
    harmful_specialized_advice = "harmful:specialized-advice"
    harmful_unsafe_practices = "harmful:unsafe-practices"
    harmful_violent_crime = "harmful:violent-crime"
    harmful_weapons_ied = "harmful:weapons:ied"
    hijacking = "hijacking"
    illegal_activity = "illegal-activity"
    imitation = "imitation"
    indirect_prompt_injection = "indirect-prompt-injection"
    intent = "intent"
    misinformation = "misinformation"
    mitre_atlas = "mitre:atlas"
    mitre_atlas_exfiltration = "mitre:atlas:exfiltration"
    mitre_atlas_impact = "mitre:atlas:impact"
    mitre_atlas_initial_access = "mitre:atlas:initial-access"
    mitre_atlas_ml_attack_staging = "mitre:atlas:ml-attack-staging"
    mitre_atlas_reconnaissance = "mitre:atlas:reconnaissance"
    mitre_atlas_resource_development = "mitre:atlas:resource-development"
    nist_ai = "nist:ai"
    nist_ai_measure = "nist:ai:measure"
    nist_ai_measure_1_1 = "nist:ai:measure:1.1"
    nist_ai_measure_1_2 = "nist:ai:measure:1.2"
    nist_ai_measure_2_1 = "nist:ai:measure:2.1"
    nist_ai_measure_2_10 = "nist:ai:measure:2.10"
    nist_ai_measure_2_11 = "nist:ai:measure:2.11"
    nist_ai_measure_2_12 = "nist:ai:measure:2.12"
    nist_ai_measure_2_13 = "nist:ai:measure:2.13"
    nist_ai_measure_2_2 = "nist:ai:measure:2.2"
    nist_ai_measure_2_3 = "nist:ai:measure:2.3"
    nist_ai_measure_2_4 = "nist:ai:measure:2.4"
    nist_ai_measure_2_5 = "nist:ai:measure:2.5"
    nist_ai_measure_2_6 = "nist:ai:measure:2.6"
    nist_ai_measure_2_7 = "nist:ai:measure:2.7"
    nist_ai_measure_2_8 = "nist:ai:measure:2.8"
    nist_ai_measure_2_9 = "nist:ai:measure:2.9"
    nist_ai_measure_3_1 = "nist:ai:measure:3.1"
    nist_ai_measure_3_2 = "nist:ai:measure:3.2"
    nist_ai_measure_3_3 = "nist:ai:measure:3.3"
    nist_ai_measure_4_1 = "nist:ai:measure:4.1"
    nist_ai_measure_4_2 = "nist:ai:measure:4.2"
    nist_ai_measure_4_3 = "nist:ai:measure:4.3"
    overreliance = "overreliance"
    owasp_api = "owasp:api"
    owasp_api_01 = "owasp:api:01"
    owasp_api_02 = "owasp:api:02"
    owasp_api_03 = "owasp:api:03"
    owasp_api_04 = "owasp:api:04"
    owasp_api_05 = "owasp:api:05"
    owasp_api_06 = "owasp:api:06"
    owasp_api_07 = "owasp:api:07"
    owasp_api_08 = "owasp:api:08"
    owasp_api_09 = "owasp:api:09"
    owasp_api_10 = "owasp:api:10"
    owasp_llm = "owasp:llm"
    owasp_llm_01 = "owasp:llm:01"
    owasp_llm_02 = "owasp:llm:02"
    owasp_llm_03 = "owasp:llm:03"
    owasp_llm_04 = "owasp:llm:04"
    owasp_llm_05 = "owasp:llm:05"
    owasp_llm_06 = "owasp:llm:06"
    owasp_llm_07 = "owasp:llm:07"
    owasp_llm_08 = "owasp:llm:08"
    owasp_llm_09 = "owasp:llm:09"
    owasp_llm_10 = "owasp:llm:10"
    personal_safety = "personal-safety"
    pii = "pii"
    pii_api_db = "pii:api-db"
    pii_direct = "pii:direct"
    pii_session = "pii:session"
    pii_social = "pii:social"
    pliny = "pliny"
    policy = "policy"
    politics = "politics"
    prompt_extraction = "prompt-extraction"
    rag_document_exfiltration = "rag-document-exfiltration"
    rag_poisoning = "rag-poisoning"
    rbac = "rbac"
    reasoning_dos = "reasoning-dos"
    religion = "religion"
    shell_injection = "shell-injection"
    sql_injection = "sql-injection"
    ssrf = "ssrf"
    system_prompt_override = "system-prompt-override"
    tool_discovery = "tool-discovery"
    toxicity = "toxicity"


class PluginConfig(BaseModel):
    class Config:
        extra = Extra.forbid

    id: Union[Id, constr(regex=r"^file\:\/\/")] = Field(
        ..., description="Name of the plugin"
    )
    numTests: Optional[PositiveInt] = Field(
        5, description="Number of tests to generate for this plugin"
    )
    config: Optional[Dict[str, Any]] = Field(
        None, description="Plugin-specific configuration"
    )


class Strategies(Enum):
    audio = "audio"
    base64 = "base64"
    basic = "basic"
    best_of_n = "best-of-n"
    citation = "citation"
    crescendo = "crescendo"
    default = "default"
    gcg = "gcg"
    goat = "goat"
    hex = "hex"
    image = "image"
    jailbreak = "jailbreak"
    jailbreak_composite = "jailbreak:composite"
    jailbreak_likert = "jailbreak:likert"
    jailbreak_tree = "jailbreak:tree"
    leetspeak = "leetspeak"
    math_prompt = "math-prompt"
    multilingual = "multilingual"
    pandamonium = "pandamonium"
    prompt_injection = "prompt-injection"
    retry = "retry"
    rot13 = "rot13"


class EvaluateOptions(BaseModel):
    class Config:
        extra = Extra.forbid

    cache: Optional[bool] = None
    delay: Optional[float] = None
    eventSource: Optional[str] = None
    generateSuggestions: Optional[bool] = None
    interactiveProviders: Optional[bool] = None
    maxConcurrency: Optional[float] = None
    repeat: Optional[float] = None
    showProgressBar: Optional[bool] = None


class CommandLineOptions(BaseModel):
    class Config:
        extra = Extra.forbid

    description: Optional[str] = None
    prompts: Optional[List[str]] = None
    providers: Optional[List[str]] = None
    output: Optional[List[str]] = None
    maxConcurrency: Optional[PositiveInt] = None
    repeat: Optional[PositiveInt] = None
    delay: Optional[conint(ge=0)] = 0
    vars: Optional[str] = None
    tests: Optional[str] = None
    config: Optional[List[str]] = None
    assertions: Optional[str] = None
    modelOutputs: Optional[str] = None
    verbose: Optional[bool] = None
    grader: Optional[str] = None
    tableCellMaxLength: Optional[PositiveInt] = None
    write: Optional[bool] = None
    cache: Optional[bool] = None
    table: Optional[bool] = None
    share: Optional[bool] = None
    progressBar: Optional[bool] = None
    watch: Optional[bool] = None
    filterErrorsOnly: Optional[str] = None
    filterFailing: Optional[str] = None
    filterFirstN: Optional[PositiveInt] = None
    filterMetadata: Optional[str] = None
    filterPattern: Optional[str] = None
    filterProviders: Optional[str] = None
    filterSample: Optional[PositiveInt] = None
    filterTargets: Optional[str] = None
    var: Optional[Dict[str, str]] = None
    generateSuggestions: Optional[bool] = None
    promptPrefix: Optional[str] = None
    promptSuffix: Optional[str] = None
    envPath: Optional[str] = None


class ProviderBaseLabel(BaseModel):
    label: Optional[str] = None


class ProviderFullConfig(BaseModel):
    class Config:
        extra = Extra.forbid

    id: Optional[Any] = None
    label: Optional[Any] = None
    config: Optional[Any] = None
    prompts: Optional[List[str]] = None
    transform: Optional[str] = None
    delay: Optional[float] = None
    env: Optional[Env] = None


class ProviderLabel(BaseModel):
    class Config:
        extra = Extra.forbid

    label: Optional[str] = None


class AdditionalProperties(BaseModel):
    class Config:
        extra = Extra.forbid

    id: Optional[Any] = None
    label: Optional[Any] = None
    config: Optional[Any] = None
    prompts: Optional[List[str]] = None
    transform: Optional[str] = None
    delay: Optional[float] = None
    env: Optional[Env] = None


class StrategyEnum(Enum):
    audio = "audio"
    base64 = "base64"
    basic = "basic"
    best_of_n = "best-of-n"
    citation = "citation"
    crescendo = "crescendo"
    default = "default"
    gcg = "gcg"
    goat = "goat"
    hex = "hex"
    image = "image"
    jailbreak = "jailbreak"
    jailbreak_composite = "jailbreak:composite"
    jailbreak_likert = "jailbreak:likert"
    jailbreak_tree = "jailbreak:tree"
    leetspeak = "leetspeak"
    math_prompt = "math-prompt"
    multilingual = "multilingual"
    pandamonium = "pandamonium"
    prompt_injection = "prompt-injection"
    retry = "retry"
    rot13 = "rot13"


class StrategyField(BaseModel):
    __root__: Union[StrategyEnum, str] = Field(..., description="Name of the strategy")


class AssertionMethodEnum(Enum):
    answer_relevance = "answer-relevance"
    bleu = "bleu"
    classifier = "classifier"
    contains_all = "contains-all"
    contains_any = "contains-any"
    contains_json = "contains-json"
    contains_sql = "contains-sql"
    contains_xml = "contains-xml"
    contains = "contains"
    context_faithfulness = "context-faithfulness"
    context_recall = "context-recall"
    context_relevance = "context-relevance"
    cost = "cost"
    equals = "equals"
    factuality = "factuality"
    g_eval = "g-eval"
    guardrails = "guardrails"
    icontains_all = "icontains-all"
    icontains_any = "icontains-any"
    icontains = "icontains"
    is_json = "is-json"
    is_refusal = "is-refusal"
    is_sql = "is-sql"
    is_valid_openai_function_call = "is-valid-openai-function-call"
    is_valid_openai_tools_call = "is-valid-openai-tools-call"
    is_xml = "is-xml"
    javascript = "javascript"
    latency = "latency"
    levenshtein = "levenshtein"
    llm_rubric = "llm-rubric"
    model_graded_closedqa = "model-graded-closedqa"
    model_graded_factuality = "model-graded-factuality"
    moderation = "moderation"
    perplexity_score = "perplexity-score"
    perplexity = "perplexity"
    python = "python"
    regex = "regex"
    rouge_n = "rouge-n"
    similar = "similar"
    starts_with = "starts-with"
    webhook = "webhook"


class GraderMethodEnum(Enum):
    select_best = "select-best"
    human = "human"


class TestOptionsConfig(BaseModel):
    prefix: Optional[str] = None
    suffix: Optional[str] = None
    postprocess: Optional[str] = None
    transform: Optional[str] = None
    transformVars: Optional[str] = None
    storeOutputAs: Optional[str] = None
    rubricPrompt: Optional[Union[str, List[str], List[RubricPromptItem]]] = None
    provider: Optional[Union[str, Any, Union[Any, Dict[str, Union[str, Any]]]]] = None
    factuality: Optional[Factuality] = None
    disableVarExpansion: Optional[bool] = None
    disableConversationVar: Optional[bool] = None
    runSerially: Optional[bool] = None


class AssertItemMethodEnum(Enum):
    answer_relevance = "answer-relevance"
    bleu = "bleu"
    classifier = "classifier"
    contains_all = "contains-all"
    contains_any = "contains-any"
    contains_json = "contains-json"
    contains_sql = "contains-sql"
    contains_xml = "contains-xml"
    contains = "contains"
    context_faithfulness = "context-faithfulness"
    context_recall = "context-recall"
    context_relevance = "context-relevance"
    cost = "cost"
    equals = "equals"
    factuality = "factuality"
    g_eval = "g-eval"
    guardrails = "guardrails"
    icontains_all = "icontains-all"
    icontains_any = "icontains-any"
    icontains = "icontains"
    is_json = "is-json"
    is_refusal = "is-refusal"
    is_sql = "is-sql"
    is_valid_openai_function_call = "is-valid-openai-function-call"
    is_valid_openai_tools_call = "is-valid-openai-tools-call"
    is_xml = "is-xml"
    javascript = "javascript"
    latency = "latency"
    levenshtein = "levenshtein"
    llm_rubric = "llm-rubric"
    model_graded_closedqa = "model-graded-closedqa"
    model_graded_factuality = "model-graded-factuality"
    moderation = "moderation"
    perplexity_score = "perplexity-score"
    perplexity = "perplexity"
    python = "python"
    regex = "regex"
    rouge_n = "rouge-n"
    similar = "similar"
    starts_with = "starts-with"
    webhook = "webhook"


class AssertItemGraderEnum(Enum):
    select_best = "select-best"
    human = "human"


class AssertItemMethodEnum2(Enum):
    answer_relevance = "answer-relevance"
    bleu = "bleu"
    classifier = "classifier"
    contains_all = "contains-all"
    contains_any = "contains-any"
    contains_json = "contains-json"
    contains_sql = "contains-sql"
    contains_xml = "contains-xml"
    contains = "contains"
    context_faithfulness = "context-faithfulness"
    context_recall = "context-recall"
    context_relevance = "context-relevance"
    cost = "cost"
    equals = "equals"
    factuality = "factuality"
    g_eval = "g-eval"
    guardrails = "guardrails"
    icontains_all = "icontains-all"
    icontains_any = "icontains-any"
    icontains = "icontains"
    is_json = "is-json"
    is_refusal = "is-refusal"
    is_sql = "is-sql"
    is_valid_openai_function_call = "is-valid-openai-function-call"
    is_valid_openai_tools_call = "is-valid-openai-tools-call"
    is_xml = "is-xml"
    javascript = "javascript"
    latency = "latency"
    levenshtein = "levenshtein"
    llm_rubric = "llm-rubric"
    model_graded_closedqa = "model-graded-closedqa"
    model_graded_factuality = "model-graded-factuality"
    moderation = "moderation"
    perplexity_score = "perplexity-score"
    perplexity = "perplexity"
    python = "python"
    regex = "regex"
    rouge_n = "rouge-n"
    similar = "similar"
    starts_with = "starts-with"
    webhook = "webhook"


class AssertItemGraderEnum2(Enum):
    select_best = "select-best"
    human = "human"


class AssertionTypeEnumModel(Enum):
    answer_relevance = "answer-relevance"
    bleu = "bleu"
    classifier = "classifier"
    contains_all = "contains-all"
    contains_any = "contains-any"
    contains_json = "contains-json"
    contains_sql = "contains-sql"
    contains_xml = "contains-xml"
    contains = "contains"
    context_faithfulness = "context-faithfulness"
    context_recall = "context-recall"
    context_relevance = "context-relevance"
    cost = "cost"
    equals = "equals"
    factuality = "factuality"
    g_eval = "g-eval"
    guardrails = "guardrails"
    icontains_all = "icontains-all"
    icontains_any = "icontains-any"
    icontains = "icontains"
    is_json = "is-json"
    is_refusal = "is-refusal"
    is_sql = "is-sql"
    is_valid_openai_function_call = "is-valid-openai-function-call"
    is_valid_openai_tools_call = "is-valid-openai-tools-call"
    is_xml = "is-xml"
    javascript = "javascript"
    latency = "latency"
    levenshtein = "levenshtein"
    llm_rubric = "llm-rubric"
    model_graded_closedqa = "model-graded-closedqa"
    model_graded_factuality = "model-graded-factuality"
    moderation = "moderation"
    perplexity_score = "perplexity-score"
    perplexity = "perplexity"
    python = "python"
    regex = "regex"
    rouge_n = "rouge-n"
    similar = "similar"
    starts_with = "starts-with"
    webhook = "webhook"


class AssertScoringFunction(BaseModel):
    __root__: Union[
        constr(regex=r"^file:\/\/.*\.(js|cjs|mjs|ts|cts|mts|py)(?::[\w.]+)?$"), Any
    ]


class Description(BaseModel):
    __root__: str


class MetadataConfig(BaseModel):
    __root__: Optional[Dict[str, Any]] = None


class OptionsModel(BaseModel):
    prefix: Optional[str] = None
    suffix: Optional[str] = None
    postprocess: Optional[str] = None
    transform: Optional[str] = None
    transformVars: Optional[str] = None
    storeOutputAs: Optional[str] = None
    rubricPrompt: Optional[Union[str, List[str], List[RubricPromptItem]]] = None
    provider: Optional[Union[str, Any, Union[Any, Dict[str, Union[str, Any]]]]] = None
    factuality: Optional[Factuality] = None
    disableVarExpansion: Optional[bool] = None
    disableConversationVar: Optional[bool] = None
    runSerially: Optional[bool] = None


class ProviderModel(BaseModel):
    class Config:
        extra = Extra.forbid

    __root__: Union[str, AdditionalProperties, Provider]


class ProviderDetails(BaseModel):
    class Config:
        extra = Extra.forbid

    callApi: Optional[Any] = None
    label: Optional[Any] = None
    transform: Optional[str] = None
    delay: Optional[float] = None
    config: Optional[Any] = None


class ProviderOutput(BaseModel):
    __root__: Union[str, Dict[str, Any]]


class Threshold(BaseModel):
    __root__: float


class Vars(BaseModel):
    __root__: Optional[
        Dict[
            str,
            Union[
                str, float, bool, List[Union[str, float, bool]], Dict[str, Any], List
            ],
        ]
    ] = None


class AssertItem(BaseModel):
    class Config:
        extra = Extra.forbid

    type: Optional[Union[Type, AssertionTypeEnumModel, GraderType, Any]] = None
    value: Optional[Any] = None
    config: Optional[Dict[str, Any]] = None
    threshold: Optional[float] = None
    weight: Optional[float] = None
    provider: Optional[Any] = None
    rubricPrompt: Optional[Any] = None
    metric: Optional[str] = None
    transform: Optional[str] = None


class Assert(BaseModel):
    class Config:
        extra = Extra.forbid

    type: str = Field("assert-set", const=True)
    assert_: List[AssertItem] = Field(..., alias="assert")
    weight: Optional[float] = None
    metric: Optional[str] = None
    threshold: Optional[float] = None
    config: Optional[Dict[str, Any]] = None


class StrategyConfig(BaseModel):
    class Config:
        extra = Extra.forbid

    id: StrategyField
    config: Optional[Dict[str, Any]] = Field(
        None, description="Strategy-specific configuration"
    )


class Redteam(BaseModel):
    class Config:
        extra = Extra.forbid

    injectVar: Optional[str] = Field(
        None,
        description="Variable to inject. Can be a string or array of strings. If string, it's transformed to an array. Inferred from the prompts by default.",
    )
    purpose: Optional[str] = Field(
        None, description="Purpose override string - describes the prompt templates"
    )
    provider: Optional[Union[str, AdditionalProperties, ProviderDetails]] = Field(
        None, description="Provider used for generating adversarial inputs"
    )
    numTests: Optional[PositiveInt] = Field(
        None, description="Number of tests to generate"
    )
    language: Optional[str] = Field(
        None, description="Language of tests ot generate for this plugin"
    )
    entities: Optional[List[str]] = Field(
        None,
        description="Names of people, brands, or organizations related to your LLM application",
    )
    plugins: Optional[
        List[Union[Union[Plugins, constr(regex=r"^file\:\/\/")], PluginConfig]]
    ] = Field(["default"], description="Plugins to use for redteam generation")
    strategies: Optional[List[Union[Union[Strategies, str], StrategyConfig]]] = Field(
        ["default"],
        description="Strategies to use for redteam generation.\n\nDefaults to basic, jailbreak, jailbreak:composite\nSupports audio, base64, basic, best-of-n, citation, crescendo, default, gcg, goat, hex, image, jailbreak, jailbreak:composite, jailbreak:likert, jailbreak:tree, leetspeak, math-prompt, multilingual, pandamonium, prompt-injection, retry, rot13",
    )
    maxConcurrency: Optional[PositiveInt] = Field(
        None, description="Maximum number of concurrent API calls"
    )
    delay: Optional[conint(ge=0)] = Field(
        None, description="Delay in milliseconds between plugin API calls"
    )


class ProvidersModel(BaseModel):
    __root__: Union[
        str,
        ProviderBaseLabel,
        List[Union[str, Dict[str, ProviderFullConfig], AdditionalProperties, ProviderLabel]],
    ]


class BasicAssertionItem(BaseModel):
    class Config:
        extra = Extra.forbid

    type: Optional[Union[AssertionMethodEnum, AssertionTypeEnumModel, GraderMethodEnum, Any]] = None
    value: Optional[Any] = None
    config: Optional[Dict[str, Any]] = None
    threshold: Optional[float] = None
    weight: Optional[float] = None
    provider: Optional[Any] = None
    rubricPrompt: Optional[Any] = None
    metric: Optional[str] = None
    transform: Optional[str] = None


class AssertionSet(BaseModel):
    class Config:
        extra = Extra.forbid

    type: str = Field("assert-set", const=True)
    assert_: List[BasicAssertionItem] = Field(..., alias="assert")
    weight: Optional[float] = None
    metric: Optional[str] = None
    threshold: Optional[float] = None
    config: Optional[Dict[str, Any]] = None


class ExtendedAssertionItem(BaseModel):
    class Config:
        extra = Extra.forbid

    type: Optional[Union[AssertItemMethodEnum, AssertionTypeEnumModel, AssertItemGraderEnum, Any]] = None
    value: Optional[Any] = None
    config: Optional[Dict[str, Any]] = None
    threshold: Optional[float] = None
    weight: Optional[float] = None
    provider: Optional[Any] = None
    rubricPrompt: Optional[Any] = None
    metric: Optional[str] = None
    transform: Optional[str] = None


class ExtendedAssertionSet(BaseModel):
    class Config:
        extra = Extra.forbid

    type: str = Field("assert-set", const=True)
    assert_: List[ExtendedAssertionItem] = Field(..., alias="assert")
    weight: Optional[float] = None
    metric: Optional[str] = None
    threshold: Optional[float] = None
    config: Optional[Dict[str, Any]] = None


class AssertionItem(BaseModel):
    class Config:
        extra = Extra.forbid

    type: Optional[Union[AssertItemMethodEnum2, AssertionTypeEnumModel, AssertItemGraderEnum2, Any]] = None
    value: Optional[Any] = None
    config: Optional[Dict[str, Any]] = None
    threshold: Optional[float] = None
    weight: Optional[float] = None
    provider: Optional[Any] = None
    rubricPrompt: Optional[Any] = None
    metric: Optional[str] = None
    transform: Optional[str] = None


class Tests(BaseModel):
    class Config:
        extra = Extra.forbid

    description: Optional[str] = None
    vars: Optional[
        Dict[
            str,
            Union[
                str, float, bool, List[Union[str, float, bool]], Dict[str, Any], List
            ],
        ]
    ] = None
    provider: Optional[Union[str, AdditionalProperties, Provider]] = None
    providerOutput: Optional[Union[str, Dict[str, Any]]] = None
    assert_: Optional[List[Union[Assert, AssertionItem]]] = Field(None, alias="assert")
    assertScoringFunction: Optional[
        Union[
            constr(regex=r"^file:\/\/.*\.(js|cjs|mjs|ts|cts|mts|py)(?::[\w.]+)?$"), Any
        ]
    ] = None
    options: Optional[Options] = None
    threshold: Optional[float] = None
    metadata: Optional[Metadata] = None


class TestCaseConfig(BaseModel):
    class Config:
        extra = Extra.forbid

    description: Optional[str] = None
    vars: Optional[
        Dict[
            str,
            Union[
                str, float, bool, List[Union[str, float, bool]], Dict[str, Any], List
            ],
        ]
    ] = None
    provider: Optional[Union[str, AdditionalProperties, Provider]] = None
    providerOutput: Optional[Union[str, Dict[str, Any]]] = None
    assert_: Optional[List[Union[AssertionSet, AssertionItem]]] = Field(None, alias="assert")
    assertScoringFunction: Optional[
        Union[
            constr(regex=r"^file:\/\/.*\.(js|cjs|mjs|ts|cts|mts|py)(?::[\w.]+)?$"), Any
        ]
    ] = None
    options: Optional[TestOptionsConfig] = None
    threshold: Optional[float] = None
    metadata: Optional[Metadata] = None


class AssertModel(BaseModel):
    class Config:
        extra = Extra.forbid

    __root__: List[Union[ExtendedAssertionSet, AssertionItem]]


class ConfigItem(BaseModel):
    class Config:
        extra = Extra.forbid

    description: Optional[Description] = None
    vars: Optional[Vars] = None
    provider: Optional[ProviderModel] = None
    providerOutput: Optional[ProviderOutput] = None
    assert_: Optional[AssertModel] = Field(None, alias="assert")
    assertScoringFunction: Optional[AssertScoringFunction] = None
    options: Optional[OptionsModel] = None
    threshold: Optional[Threshold] = None
    metadata: Optional[Metadata] = None


class Scenarios(BaseModel):
    class Config:
        extra = Extra.forbid

    description: Optional[str] = None
    config: List[ConfigItem]
    tests: List[TestCaseConfig]


class DefaultTest(BaseModel):
    class Config:
        extra = Extra.forbid

    vars: Optional[Vars] = None
    provider: Optional[ProviderModel] = None
    providerOutput: Optional[ProviderOutput] = None
    assert_: Optional[AssertModel] = Field(None, alias="assert")
    assertScoringFunction: Optional[AssertScoringFunction] = None
    options: Optional[OptionsModel] = None
    threshold: Optional[Threshold] = None
    metadata: Optional[Metadata] = None


class PromptfooConfigSchema(BaseModel):
    class Config:
        extra = Extra.forbid

    tags: Optional[Dict[str, str]] = None
    description: Optional[str] = None
    providers: Optional[
        Union[
            str,
            Providers,
            List[Union[str, Dict[str, ProviderConfig], AdditionalProperties, ProviderLabel]],
        ]
    ] = None
    prompts: Union[str, List[Union[str, Prompts, PromptConfig]], Dict[str, str]]
    tests: Optional[Union[str, List[Union[str, Tests]]]] = None
    scenarios: Optional[List[Union[str, Scenarios]]] = None
    defaultTest: Optional[DefaultTest] = None
    outputPath: Optional[Union[str, List[str]]] = None
    sharing: Optional[Union[bool, Sharing]] = None
    nunjucksFilters: Optional[Dict[str, str]] = None
    env: Optional[Union[Env, Dict[str, Union[str, float, bool]]]] = None
    derivedMetrics: Optional[List[DerivedMetric]] = None
    extensions: Optional[List[str]] = None
    metadata: Optional[MetadataConfig] = None
    redteam: Optional[Redteam] = None
    writeLatestResults: Optional[bool] = None
    evaluateOptions: Optional[EvaluateOptions] = None
    commandLineOptions: Optional[CommandLineOptions] = None
    targets: Optional[ProvidersModel] = None


class Model(BaseModel):
    __root__: PromptfooConfigSchema
