# Promptfoo Development Guidelines

This repository contains cursor rules to help with development of the promptfoo project.

## Available Rules

The following specialized rules are available for different aspects of the project:

- **examples**: Guidelines for creating and maintaining examples in the promptfoo project
- **docusaurus**: Guidelines for updating Docusaurus documentation following best practices  
- **jest**: Guidelines for writing Jest tests for core functionality
- **python**: Guidelines for Python development

## General Development Notes

- **Important**: When testing locally during development, use `npm run local -- eval -c ...` instead of `npx promptfoo@latest eval -c ...`
- This ensures you're testing against the local development version rather than the published package
- Use `--no-cache` flag when testing to ensure fresh results during development

## Project Structure

This is a TypeScript/Node.js project with:
- Core functionality in `src/`
- Tests in `test/`  
- Examples in `examples/`
- Documentation in `site/`
- Various provider implementations in `src/providers/`

Please follow the existing code style and patterns when contributing.

## Example Structure

- Each example should have its own directory with a clear, descriptive name
- The README.md must begin with the folder name as an H1 heading:
  ```markdown
  # example-name (human readable name)
  ```
- Every example README must include how to run it with:

  ````markdown
  You can run this example with:

  ```bash
  npx promptfoo@latest init --example example-name
  ```
  ````

- Include a comprehensive README.md that explains:
  - The purpose of the example
  - Required prerequisites or setup
  - Step-by-step instructions for running the example
  - Expected outputs or results
- Structure examples consistently with common patterns across the project
- Include a working `promptfooconfig.yaml` (or equivalent) file

## Configuration File Structure 